#===============================================================
# Description: Build OpenWrt
# File name: AP4220-Plus-OpenWrt.yml
# Author: BHRQ12
# https://github.com/BHRQ12
#===============================================================

name: AP4220 Plus OpenWrt

on:
  workflow_dispatch:
  schedule:
    - cron: 0 20 * * *

env:
  SOURCE_URL: https://github.com/bhrq12/lede.git
  SOURCE_BRANCH: v2025.5.18
  CONFIG_FILE: configs/ap4220-plus-1.config
  DIY_SCRIPT: diy-script-1.sh
  TOOLCHAIN_TAG: Toolchain
  CLASH_KERNEL: arm64
  UPLOAD_BIN_DIR: false
  FIRMWARE_RELEASE: true
  FIRMWARE_TAG: ROOTFS_PLUS
  OPENWRT_RELEASE: true
  OPENWRT_TAG: AP4220_PLUS
  TZ: Asia/Shanghai

jobs:
  Toolchain:
    runs-on: ubuntu-22.04
    outputs:
      OPENWRT_PATH: ${{ steps.clone.outputs.OPENWRT_PATH }}
      VERSION_INFO: ${{ steps.clone.outputs.VERSION_INFO }}
      CURRENT_BRANCH: ${{ steps.env.outputs.CURRENT_BRANCH }}
      SOURCE_REPO: ${{ steps.env.outputs.SOURCE_REPO }}
      DEVICE_TARGET: ${{ steps.env.outputs.DEVICE_TARGET }}
      DEVICE_SUBTARGET: ${{ steps.env.outputs.DEVICE_SUBTARGET }}
      TOOLCHAIN_IMAGE: ${{ steps.env.outputs.TOOLCHAIN_IMAGE }}
    steps:
      - name: Checkout
        uses: actions/checkout@main

      - name: 初始化编译环境
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo rm -rf /etc/apt/sources.list.d/*
          sudo -E apt-get -qq update
          sudo -E apt-get -y install $(curl -fsSL is.gd/depends_ubuntu_2204) clang g++
          sudo timedatectl set-timezone "$TZ"

      - name: 克隆源代码
        id: clone
        run: |
          git clone $SOURCE_URL -b $SOURCE_BRANCH workspace/openwrt
          cd workspace/openwrt
          echo "OPENWRT_PATH=$PWD" >> $GITHUB_ENV
          echo "OPENWRT_PATH=$(echo $PWD)" >> $GITHUB_OUTPUT
          echo "VERSION_INFO=$(git show -s --date=short --format='Author: %an<br/>date: %cd<br/>commit: %s<br/>commit hash: %H')" >> $GITHUB_OUTPUT

      - name: 生成工具链配置
        run: |
          mv $CONFIG_FILE $OPENWRT_PATH/.config
          echo "CONFIG_ALL=y" >> $OPENWRT_PATH/.config
          echo "CONFIG_ALL_NONSHARED=y" >> $OPENWRT_PATH/.config
          cd $OPENWRT_PATH && make defconfig > /dev/null

      - name: 生成环境变量
        id: env
        run: |
          echo "CURRENT_BRANCH=$(git symbolic-ref --short HEAD)" >> $GITHUB_OUTPUT
          cd $OPENWRT_PATH
          echo "SOURCE_REPO=$(basename $SOURCE_URL .git)" >> $GITHUB_OUTPUT
          echo "DEVICE_TARGET=$(grep CONFIG_TARGET_BOARD .config | awk -F '"' '{print $2}')" >> $GITHUB_OUTPUT
          echo "DEVICE_SUBTARGET=$(grep CONFIG_TARGET_SUBTARGET .config | awk -F '"' '{print $2}')" >> $GITHUB_OUTPUT
          echo "TOOLCHAIN_IMAGE=toolchain-$(basename $SOURCE_URL .git)-$SOURCE_BRANCH-$DEVICE_TARGET-$DEVICE_SUBTARGET" >> $GITHUB_OUTPUT

      - name: 工具链哈希比对
        id: hash
        run: |
          cd $OPENWRT_PATH
          export CURRENT_HASH=$(git log --pretty=tformat:"%H" -n1 tools toolchain)
          echo "CURRENT_HASH=$CURRENT_HASH" >> $GITHUB_ENV
          echo "CURRENT_HASH is $CURRENT_HASH"
          export CACHE_HASH=$(curl -fsSL https://github.com/$GITHUB_REPOSITORY/releases/download/$TOOLCHAIN_TAG/$TOOLCHAIN_IMAGE.hash || echo "")
          echo "CACHE_HASH is $CACHE_HASH"
          if [ -z "$CACHE_HASH" ] || [ "$CURRENT_HASH" != "$CACHE_HASH" ]; then
            echo "REBUILD_TOOLCHAIN=true" >> $GITHUB_OUTPUT
          else
            echo "Toolchain is up to date."
          fi
            
      - name: 安装软件源
        if: steps.hash.outputs.REBUILD_TOOLCHAIN == 'true'
        run: |
          cd $OPENWRT_PATH
          ./scripts/feeds update -a
          ./scripts/feeds install -a
  
      - name: 编译基础工具
        if: steps.hash.outputs.REBUILD_TOOLCHAIN == 'true'
        run: |
          cd $OPENWRT_PATH
          make defconfig
          echo -e "$(nproc) thread compile"
          make tools/compile -j$(nproc) || make tools/compile -j1 V=s
  
      - name: 编译完整工具链
        if: steps.hash.outputs.REBUILD_TOOLCHAIN == 'true'
        run: |
          cd $OPENWRT_PATH
          echo -e "$(nproc) thread compile"
          make toolchain/compile -j$(nproc) || make toolchain/compile -j1 V=s
          rm -rf .config* dl bin
  
      - name: 生成工具链镜像
        if: steps.hash.outputs.REBUILD_TOOLCHAIN == 'true'
        run: |
          cd workspace
          mksquashfs openwrt $TOOLCHAIN_IMAGE -force-gid 1001 -force-uid 1001 -comp zstd
          mkdir -p $GITHUB_WORKSPACE/output
          split -d -b 1900M $TOOLCHAIN_IMAGE $GITHUB_WORKSPACE/output/$TOOLCHAIN_IMAGE.img.
          rm $TOOLCHAIN_IMAGE
          echo $CURRENT_HASH > $GITHUB_WORKSPACE/output/$TOOLCHAIN_IMAGE.hash
          ls -lh $GITHUB_WORKSPACE/output
          
      - name: 编译工具链
        if: steps.hash.outputs.REBUILD_TOOLCHAIN == 'true'
        uses: mknejp/delete-release-assets@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ env.TOOLCHAIN_TAG }}
          assets: '${{ env.TOOLCHAIN_IMAGE }}.*'
          fail-if-no-assets: false
          fail-if-no-release: false

      - name: 发布工具链
        if: steps.hash.outputs.REBUILD_TOOLCHAIN == 'true'
        uses: ncipollo/release-action@v1
        with:
          name: Toolchain-Image
          allowUpdates: true
          tag: ${{ env.TOOLCHAIN_TAG }}
          token: ${{ secrets.GITHUB_TOKEN }}
          artifacts: output/*
          body: OpenWrt 工具链镜像文件

  Firmware_Base:
    needs: Toolchain
    runs-on: ubuntu-22.04
    env:
      OPENWRT_PATH: ${{ needs.Toolchain.outputs.OPENWRT_PATH }}
      VERSION_INFO: ${{ needs.Toolchain.outputs.VERSION_INFO }}
      DEVICE_TARGET: ${{ needs.Toolchain.outputs.DEVICE_TARGET }}
    steps:
      - name: 准备编译环境
        run: |
          sudo rm -rf /etc/apt/sources.list.d/*
          sudo -E apt-get -qq update
          sudo -E apt-get -y install $(curl -fsSL is.gd/depends_ubuntu_2204) clang g++

      - name: 挂载工具链
        run: |
          mkdir -p workspace
          cd workspace
          curl -fsLO https://github.com/$GITHUB_REPOSITORY/releases/download/$TOOLCHAIN_TAG/$TOOLCHAIN_IMAGE
          sudo mount -o loop $TOOLCHAIN_IMAGE openwrt

      - name: 加载基础配置
        run: |
          cd $OPENWRT_PATH
          mv $CONFIG_FILE .config
          $GITHUB_WORKSPACE/$DIY_SCRIPT
          make defconfig

      - name: 编译基础固件
        run: |
          cd $OPENWRT_PATH
          make target/compile -j$(nproc) V=s
          make target/install -j$(nproc) V=s

      - name: 上传基础固件
        uses: actions/upload-artifact@v3
        with:
          name: firmware-base-${{ env.DEVICE_TARGET }}
          path: ${{ env.OPENWRT_PATH }}/bin

  Package_Integration:
    needs: Firmware_Base
    runs-on: ubuntu-22.04
    env:
      FIRMWARE_BASE_PATH: ${{ needs.Firmware_Base.outputs.OPENWRT_PATH }}
      DEVICE_TARGET: ${{ needs.Toolchain.outputs.DEVICE_TARGET }}
    steps:
      - name: 下载基础固件
        uses: actions/download-artifact@v3
        with:
          name: firmware-base-${{ env.DEVICE_TARGET }}
          path: firmware-base

      - name: 加载软件包配置
        run: |
          cp -r firmware-base/* ${{ env.OPENWRT_PATH }}/bin
          cd ${{ env.OPENWRT_PATH }}
          mv ${{ github.workspace }}/configs/package-list.config .config
          make defconfig

      - name: 编译指定软件包
        run: |
          cd ${{ env.OPENWRT_PATH }}
          make package/compile -j$(nproc) V=s

      - name: 集成软件包到固件
        run: |
          cd ${{ env.OPENWRT_PATH }}
          make package/install -j$(nproc) V=s
          ./scripts/mkfirmware.sh  # 假设存在打包脚本

      - name: 发布最终固件
        if: success()
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ env.FIRMWARE_TAG }}
          allowUpdates: true
          artifacts: "${{ env.OPENWRT_PATH }}/bin/**/*"
          token: ${{ secrets.GITHUB_TOKEN }}
          body: |
            **AP4220 Plus 固件发布**
            - 内核版本：5.10.237
            - 包含软件包：$(ls ${{ env.OPENWRT_PATH }}/bin/packages | tr '\n' ',')
            ${{ env.VERSION_INFO }}
